/* --------------------------------------------------------------------------------------------------------------------------------- */
/* C8 PARTE 1 */

/* EL ANALISIS UNIVARIADO SE DIVIDIRA PARA VARIABLES CUANTITATIVAS Y CUALITATIVAS
/* VARIABLES CUANTITATIVAS: PARTIREMOS DE LOS RANGOS GENERADOS CON EL PROC UNIVARIATE. BUSCAREMOS COMBINAR RANGO ADYACENTES DE TAL MANERA QUE EL PORCENTAJE DE MALOS SEA MONOTONO CRECIENTE O MONOTONO DECRECIENTE. */
/* VARIABLES CUALITATIVAS: 	BUSCAREMOS COMBINAR CATEGORIAS ADYACENTES DE TAL MANERA QUE EL PORCENTAJE DE MALOS SEA MONOTONO CRECIENTE O MONOTONO DECRECIENTE.*/
/* NOTA: CADA CATEGORIA DEBE TENER AL MENOS UN 5% DEL TORAL DE OBSERVACIONES, DE LO CONTRARIO COMBINAR CON UNA CATEGORIA ADYACENTE. */


/**************************************** ANALISIS UNIVARIADO PARA VARIABLES CUANTITATIVAS /****************************************/

/***********************************************************************************************/
/**************************************** VARIABLE MONTO SOLICITADO ****************************/
/***********************************************************************************************/

/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */ 
PROC SQL;											
CREATE TABLE WORK.TEMPORAL AS
SELECT 		S.CLIENTE,
			MONTO_SOLICITADO as MONTO_SOLICITADO_ORIGINAL,
			CASE 
				WHEN	MONTO_SOLICITADO IS NULL THEN .
				ELSE 	MONTO_SOLICITADO
			END AS MONTO_SOLICITADO,
			F.BAD
FROM		ORIGINA.SOLICITUD 		AS S
INNER JOIN	ORIGINA.FLAG_G_B 		AS F ON F.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.DEMOGRAFICOS 	AS D ON D.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.BURO 			AS B ON B.CLIENTE=S.CLIENTE;
QUIT;

/* GENERAR RANGOS CON AL MENOS EL 5% DE POBLACION EN ELLOS */
PROC UNIVARIATE DATA=WORK.TEMPORAL NOPRINT;			
VAR MONTO_SOLICITADO;
OUTPUT OUT=WORK.RANGOS PCTLPRE=P_ PCTLPTS=0 TO 100 BY 5;		
RUN;

/* CREAR RANGOS DEFINIDOS POR PROC UNIVARIATE */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_MONTO_SOLICITADO AS 
SELECT 	RANGO_MONTO_SOLICITADO,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			MONTO_SOLICITADO,
			CASE 
			WHEN MONTO_SOLICITADO >= 1500  AND MONTO_SOLICITADO < 3000  THEN '00 1500 - 3000'
			WHEN MONTO_SOLICITADO >= 3000  AND MONTO_SOLICITADO < 5000  THEN '01 3000 - 5000'
			WHEN MONTO_SOLICITADO >= 5000  AND MONTO_SOLICITADO < 6000  THEN '02 5000 - 6000'
			WHEN MONTO_SOLICITADO >= 6000  AND MONTO_SOLICITADO < 7000  THEN '03 6000 - 7000'
			WHEN MONTO_SOLICITADO >= 7000  AND MONTO_SOLICITADO < 8000  THEN '04 7000 - 8000'
			WHEN MONTO_SOLICITADO >= 8000  AND MONTO_SOLICITADO < 9000  THEN '05 8000 - 9000'
			WHEN MONTO_SOLICITADO >= 9000  AND MONTO_SOLICITADO < 10000 THEN '06 9000 - 10000'
			WHEN MONTO_SOLICITADO >= 10000 AND MONTO_SOLICITADO < 15000 THEN '07 10000 - 15000'
			WHEN MONTO_SOLICITADO >= 15000 AND MONTO_SOLICITADO < 20000 THEN '08 15000 - 20000'
			WHEN MONTO_SOLICITADO >= 20000 								THEN '09 20000 - MAS'
			END AS RANGO_MONTO_SOLICITADO
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;

/* RANGOS NUEVOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_MONTO_SOLICITADO AS 
SELECT 	RANGO_MONTO_SOLICITADO,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			MONTO_SOLICITADO,
			CASE 
			WHEN MONTO_SOLICITADO >= 1500  AND MONTO_SOLICITADO < 5000  THEN '00 1500 - 5000'
			WHEN MONTO_SOLICITADO >= 5000  AND MONTO_SOLICITADO < 8000  THEN '01 5000 - 8000'			
			WHEN MONTO_SOLICITADO >= 8000     							THEN '03 8000 - MAS'
			END AS RANGO_MONTO_SOLICITADO
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;


/* INSUMO REGRESION */
/* EL SIGUIENTE PASO ES TRANSFORMAR LAS VARIABLES ORIGINALES PARA QUE SIRVAN COMO INSUMO DE LA REGRESION LOGISTICA.
SE SUSTITUIRAN LOS VALORES DE LAS VARIABLES ORIGINALES POR SU CORRESPONDIENTE PORCENTAJE DE BADS DE ACUERDO A LOS RANGOS RECIEN CALCULADOS, 
POR LO QUE TENDREMOS UN MODELO CUYOS REGRESORES SON PORCENTAJES, ES DECIR VALORE EN EL INTERVALO [0,1]

/* CREAR LA VARIABLE INSUMO PARA LA REGRESION */
PROC SQL;											
CREATE TABLE ORIGINA.R_MONTO_SOLICITADO AS 
SELECT 	CLIENTE,
		Z.MONTO_SOLICITADO,
		Z.RANGO_MONTO_SOLICITADO,
		PORCENTAJE_BADS AS R_MONTO_SOLICITADO
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			MONTO_SOLICITADO,
			CASE 
			WHEN MONTO_SOLICITADO >= 1500  AND MONTO_SOLICITADO < 5000  THEN '00 1500 - 5000'
			WHEN MONTO_SOLICITADO >= 5000  AND MONTO_SOLICITADO < 8000  THEN '01 5000 - 8000'			
			WHEN MONTO_SOLICITADO >= 8000     							THEN '02 8000 - MAS'
			END AS RANGO_MONTO_SOLICITADO
		FROM	WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_MONTO_SOLICITADO AS U
ON Z.RANGO_MONTO_SOLICITADO=U.RANGO_MONTO_SOLICITADO
;QUIT;

/***********************************************************************************************/
/**************************************** VARIABLE EDAD ****************************************/
/***********************************************************************************************/


/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */
PROC SQL;
CREATE TABLE WORK.TEMPORAL AS
SELECT 		S.CLIENTE,
			INTCK('YEAR',FECHA_NACIMIENTO,S.FECHA_SOLICITUD) AS EDAD_ORIGINAL,
			CASE 
				WHEN	INTCK('YEAR',FECHA_NACIMIENTO,S.FECHA_SOLICITUD) 	 IS NULL 	   THEN .
				ELSE 	INTCK('YEAR',FECHA_NACIMIENTO,S.FECHA_SOLICITUD)
			END AS EDAD,
			BAD
FROM		ORIGINA.SOLICITUD 		AS S
INNER JOIN	ORIGINA.FLAG_G_B 		AS F ON F.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.DEMOGRAFICOS 	AS D ON D.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.BURO 			AS B ON B.CLIENTE=S.CLIENTE;
QUIT;

/* GENERAR RANGOS CON AL MENOS EL 5% DE POBLACION EN ELLOS */
PROC UNIVARIATE DATA=WORK.TEMPORAL NOPRINT;			
VAR EDAD;
OUTPUT OUT=WORK.RANGOS PCTLPRE=P_ PCTLPTS=0 TO 100 BY 5;		
RUN;

/* CREAR RANGOS DEFINIDOS POR PROC UNIVARIATE */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_EDAD AS 
SELECT 	RANGO_EDAD,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			EDAD,
			CASE 
				WHEN EDAD >= 18 AND EDAD < 21 THEN '00 18 - 21'
				WHEN EDAD >= 21 AND EDAD < 23 THEN '01 21 - 23'
				WHEN EDAD >= 23 AND EDAD < 25 THEN '02 23 - 25'
				WHEN EDAD >= 25 AND EDAD < 26 THEN '03 25 - 26'
				WHEN EDAD >= 26 AND EDAD < 28 THEN '04 26 - 28'
				WHEN EDAD >= 28 AND EDAD < 30 THEN '05 28 - 30'
				WHEN EDAD >= 30 AND EDAD < 31 THEN '06 30 - 31'
				WHEN EDAD >= 31 AND EDAD < 33 THEN '07 31 - 33'
				WHEN EDAD >= 33 AND EDAD < 35 THEN '08 33 - 35'
				WHEN EDAD >= 35 AND EDAD < 37 THEN '09 35 - 37'
				WHEN EDAD >= 37 AND EDAD < 39 THEN '10 37 - 39'
				WHEN EDAD >= 39 AND EDAD < 41 THEN '11 39 - 41'
				WHEN EDAD >= 41 AND EDAD < 42 THEN '12 41 - 42'
				WHEN EDAD >= 42 AND EDAD < 45 THEN '13 42 - 45'
				WHEN EDAD >= 45 AND EDAD < 47 THEN '14 45 - 47'
				WHEN EDAD >= 47 AND EDAD < 49 THEN '15 47 - 49'
				WHEN EDAD >= 49 AND EDAD < 52 THEN '16 49 - 52'
				WHEN EDAD >= 52 AND EDAD < 55 THEN '17 52 - 55'
				WHEN EDAD >= 55 AND EDAD < 60 THEN '18 55 - 60'
				WHEN EDAD >= 60 AND EDAD < 71 THEN '19 60 - 71'
				WHEN EDAD >= 71 THEN '20 71 - MAS'
			END AS RANGO_EDAD
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;

/* RANGOS NUEVOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_EDAD AS 
SELECT 	RANGO_EDAD,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			EDAD,
			CASE 
				WHEN EDAD >= 18  AND EDAD < 23  THEN '00 18 - 23'
				WHEN EDAD >= 23  AND EDAD < 30  THEN '01 23 - 30'
				WHEN EDAD >= 30  AND EDAD < 39  THEN '02 30 - 39'
				WHEN EDAD >= 39  AND EDAD < 49  THEN '03 39 - 49'
				WHEN EDAD >= 49  AND EDAD < 55  THEN '04 49 - 55'
				WHEN EDAD >= 55     			THEN '05 55 - MAS'
			END AS RANGO_EDAD
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;

/* CREAR LA VARIABLE INSUMO PARA LA REGRESION */
PROC SQL;											
CREATE TABLE ORIGINA.R_EDAD AS 
SELECT 	CLIENTE,
		Z.EDAD,
		Z.RANGO_EDAD,
		PORCENTAJE_BADS AS R_EDAD
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			EDAD,
			CASE 
				WHEN EDAD >= 18  AND EDAD < 23  THEN '00 18 - 23'
				WHEN EDAD >= 23  AND EDAD < 30  THEN '01 23 - 30'
				WHEN EDAD >= 30  AND EDAD < 39  THEN '02 30 - 39'
				WHEN EDAD >= 39  AND EDAD < 49  THEN '03 39 - 49'
				WHEN EDAD >= 49  AND EDAD < 55  THEN '04 49 - 55'
				WHEN EDAD >= 55     			THEN '05 55 - MAS'
			END AS RANGO_EDAD
		FROM	WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_EDAD AS U
ON Z.RANGO_EDAD=U.RANGO_EDAD
;QUIT;

/***********************************************************************************************/
/**************************************** VARIABLE BC_SCORE ************************************/
/***********************************************************************************************/

/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */
PROC SQL;
CREATE TABLE WORK.TEMPORAL AS
SELECT 		S.CLIENTE,
			BC_SCORE AS BC_SCORE_ORIGINAL,
			CASE 
				WHEN	BC_SCORE < 0 THEN 0
				ELSE 	BC_SCORE
			END AS BC_SCORE,
			BAD
FROM		ORIGINA.SOLICITUD 		AS S
INNER JOIN	ORIGINA.FLAG_G_B 		AS F ON F.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.DEMOGRAFICOS 	AS D ON D.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.BURO 			AS B ON B.CLIENTE=S.CLIENTE;
QUIT;

/* GENERAR RANGOS CON AL MENOS EL 5% DE POBLACION EN ELLOS */
PROC UNIVARIATE DATA=WORK.TEMPORAL NOPRINT;			
VAR BC_SCORE;
OUTPUT OUT=WORK.RANGOS PCTLPRE=P_ PCTLPTS=0 TO 100 BY 5;		
RUN;

/* CREAR RANGOS DEFINIDOS POR PROC UNIVARIATE */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_BC_SCORE AS 
SELECT 	RANGO_BC_SCORE,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			BC_SCORE,
			CASE 
				WHEN BC_SCORE>=0   AND BC_SCORE < 633 THEN '01 0 - 633'
				WHEN BC_SCORE>=633 AND BC_SCORE < 656 THEN '02 633 - 656'
				WHEN BC_SCORE>=656 AND BC_SCORE < 672 THEN '03 656 - 672'
				WHEN BC_SCORE>=672 AND BC_SCORE < 683 THEN '04 672 - 683'
				WHEN BC_SCORE>=683 AND BC_SCORE < 692 THEN '05 683 - 692'
				WHEN BC_SCORE>=692 AND BC_SCORE < 699 THEN '06 692 - 699'
				WHEN BC_SCORE>=699 AND BC_SCORE < 707 THEN '07 699 - 707'
				WHEN BC_SCORE>=707 AND BC_SCORE < 715 THEN '08 707 - 715'
				WHEN BC_SCORE>=715 AND BC_SCORE < 724 THEN '09 715 - 724'
				WHEN BC_SCORE>=724 AND BC_SCORE < 739 THEN '10 724 - 739'
				WHEN BC_SCORE>=739                    THEN '11 739 - MAS'
			END AS RANGO_BC_SCORE
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;


/* RANGOS NUEVOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_BC_SCORE AS 
SELECT 	RANGO_BC_SCORE,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			BC_SCORE,
			CASE 
				WHEN BC_SCORE>=0   AND BC_SCORE < 633 THEN '01 0 - 633'
				WHEN BC_SCORE>=633 AND BC_SCORE < 692 THEN '02 633 - 692'
				WHEN BC_SCORE>=692 AND BC_SCORE < 715 THEN '03 692 - 715'
				WHEN BC_SCORE>=715 AND BC_SCORE < 739 THEN '04 715 - 739'
				WHEN BC_SCORE>=739                    THEN '05 739 - MAS'
			END AS RANGO_BC_SCORE
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;


/* CREAR LA VARIABLE INSUMO PARA LA REGRESION */
PROC SQL;											
CREATE TABLE ORIGINA.R_BC_SCORE AS 
SELECT 	CLIENTE,
		Z.BC_SCORE,
		Z.RANGO_BC_SCORE,
		PORCENTAJE_BADS AS R_BC_SCORE
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			BC_SCORE,
			CASE 
				WHEN BC_SCORE>=0   AND BC_SCORE < 633 THEN '01 0 - 633'
				WHEN BC_SCORE>=633 AND BC_SCORE < 692 THEN '02 633 - 692'
				WHEN BC_SCORE>=692 AND BC_SCORE < 715 THEN '03 692 - 715'
				WHEN BC_SCORE>=715 AND BC_SCORE < 739 THEN '04 715 - 739'
				WHEN BC_SCORE>=739                    THEN '05 739 - MAS'
			END AS RANGO_BC_SCORE
		FROM	WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_BC_SCORE AS U ON Z.RANGO_BC_SCORE=U.RANGO_BC_SCORE
;QUIT;

/***********************************************************************************************/
/**************************************** VARIABLE INGRESO TOTAL *******************************/
/***********************************************************************************************/

/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */
PROC SQL;
CREATE TABLE WORK.TEMPORAL AS
SELECT 		S.CLIENTE,
			BAD,
			INGRESO_FIJO + INGRESO_VARIABLE AS INGRESO_TOTAL_ORIGINAL,
			CASE 
				WHEN INGRESO_FIJO IS NULL      AND INGRESO_VARIABLE IS NOT NULL THEN INGRESO_VARIABLE
				WHEN INGRESO_FIJO IS NOT NULL  AND INGRESO_VARIABLE IS NULL 	THEN INGRESO_FIJO
				WHEN INGRESO_FIJO IS NULL      AND INGRESO_VARIABLE IS NULL 	THEN 0
				ELSE INGRESO_FIJO + INGRESO_VARIABLE
			END AS INGRESO_TOTAL
FROM		ORIGINA.SOLICITUD 		AS S
INNER JOIN	ORIGINA.FLAG_G_B 		AS F ON F.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.DEMOGRAFICOS 	AS D ON D.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.BURO 			AS B ON B.CLIENTE=S.CLIENTE;
QUIT;

/* GENERAR RANGOS CON AL MENOS EL 5% DE POBLACION EN ELLOS */
PROC UNIVARIATE DATA=WORK.TEMPORAL NOPRINT;			
VAR INGRESO_TOTAL;
OUTPUT OUT=WORK.RANGOS PCTLPRE=P_ PCTLPTS=0 TO 100 BY 5;		
RUN;

/* CREAR RANGOS DEFINIDOS POR PROC UNIVARIATE */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_INGRESO_TOTAL AS 
SELECT 	RANGO_INGRESO_TOTAL,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			INGRESO_TOTAL,
			CASE 
				WHEN INGRESO_TOTAL>=1959.05 AND INGRESO_TOTAL < 3372    THEN '01 1959.05 - 3372'
				WHEN INGRESO_TOTAL>=3372    AND INGRESO_TOTAL < 3990    THEN '02 3372 - 3990'
				WHEN INGRESO_TOTAL>=3990    AND INGRESO_TOTAL < 4286    THEN '03 3990 - 4286'
				WHEN INGRESO_TOTAL>=4286    AND INGRESO_TOTAL < 4619.02 THEN '04 4286 - 4619.02'
				WHEN INGRESO_TOTAL>=4619.02 AND INGRESO_TOTAL < 5000    THEN '05 4619.02 - 5000'
				WHEN INGRESO_TOTAL>=5000    AND INGRESO_TOTAL < 5196    THEN '06 5000 - 5196'
				WHEN INGRESO_TOTAL>=5196    AND INGRESO_TOTAL < 5520    THEN '07 5196 - 5520'
				WHEN INGRESO_TOTAL>=5520    AND INGRESO_TOTAL < 6000    THEN '08 5520 - 6000'
				WHEN INGRESO_TOTAL>=6000    AND INGRESO_TOTAL < 6062    THEN '09 6000 - 6062'
				WHEN INGRESO_TOTAL>=6062    AND INGRESO_TOTAL < 6500    THEN '10 6062 - 6500'
				WHEN INGRESO_TOTAL>=6500    AND INGRESO_TOTAL < 6990    THEN '11 6500 - 6990'
				WHEN INGRESO_TOTAL>=6990    AND INGRESO_TOTAL < 7342.78 THEN '12 6990 - 7342.78'
				WHEN INGRESO_TOTAL>=7342.78 AND INGRESO_TOTAL < 7936.88 THEN '13 7342.78 - 7936.88'
				WHEN INGRESO_TOTAL>=7936.88 AND INGRESO_TOTAL < 8027    THEN '14 7936.88 - 8027'
				WHEN INGRESO_TOTAL>=8027    AND INGRESO_TOTAL < 8713.8  THEN '15 8027 - 8713.8'
				WHEN INGRESO_TOTAL>=8713.8  AND INGRESO_TOTAL < 9376.33 THEN '16 8713.8 - 9376.33'
				WHEN INGRESO_TOTAL>=9376.33 AND INGRESO_TOTAL < 10624  THEN '17 9376.33 - 10624'
				WHEN INGRESO_TOTAL>=10624   AND INGRESO_TOTAL < 13000  THEN '18 10624 - 13000'
				WHEN INGRESO_TOTAL>=13000   AND INGRESO_TOTAL < 18495  THEN '19 13000 - 18495'
				WHEN INGRESO_TOTAL>=18495                              THEN '20 18495 - MAS'
			END AS RANGO_INGRESO_TOTAL
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;


/* RANGOS NUEVOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;											
CREATE TABLE ORIGINA.UNIV_INGRESO_TOTAL AS 
SELECT 	RANGO_INGRESO_TOTAL,
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		AVG(BAD) AS PORCENTAJE_BADS
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			INGRESO_TOTAL,
			CASE 
				WHEN INGRESO_TOTAL>=1959.05  AND INGRESO_TOTAL < 6062 	 THEN '01 1959.05 - 6062'
				WHEN INGRESO_TOTAL>=6062                             	 THEN '02 6062 - MAS'
			END AS RANGO_INGRESO_TOTAL
		FROM	WORK.TEMPORAL
) AS Z	
GROUP BY 1
ORDER BY 1
;QUIT;



/* CREAR LA VARIABLE INSUMO PARA LA REGRESION */
PROC SQL;											
CREATE TABLE ORIGINA.R_INGRESO_TOTAL AS 
SELECT 	CLIENTE,
		Z.INGRESO_TOTAL,
		Z.RANGO_INGRESO_TOTAL,
		PORCENTAJE_BADS AS R_INGRESO_TOTAL
FROM
(   	
	SELECT 	CLIENTE,
			BAD,
			INGRESO_TOTAL,
			CASE 
				WHEN INGRESO_TOTAL>=1959.05  AND INGRESO_TOTAL < 6062 	 THEN '01 1959.05 - 6062'
				WHEN INGRESO_TOTAL>=6062                             	 THEN '02 6062 - MAS'
			END AS RANGO_INGRESO_TOTAL
		FROM	WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_INGRESO_TOTAL AS U ON Z.RANGO_INGRESO_TOTAL=U.RANGO_INGRESO_TOTAL
;QUIT;





/* --------------------------------------------------------------------------------------------------------------------------------- */
/* C8 Parte 2 */

/**************************************** ANALISIS UNIVARIADO PARA VARIABLES CUALITATIVAS ****************************************/

/***********************************************************************************************/
/**************************************** VARIABLE NIVEL ESTUDIOS ******************************/
/***********************************************************************************************/

/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */
PROC SQL;																		
CREATE TABLE WORK.TEMPORAL AS
SELECT 		F.CLIENTE,
			NIVEL_ESTUDIOS AS NIVEL_ESTUDIO_ORIGINAL,
			CASE
				WHEN NIVEL_ESTUDIOS IS NULL THEN "NA"
			ELSE NIVEL_ESTUDIOS
			END AS NIVEL_ESTUDIOS,
			BAD
FROM 		ORIGINA.DEMOGRAFICOS AS D
INNER JOIN 	ORIGINA.FLAG_G_B AS F ON D.CLIENTE = F.CLIENTE;
QUIT;


/* TABLA PARA OBTENER EL PORCENTAJE DE MALOS POR CADA CATEGORIA */
PROC SQL;
CREATE TABLE ORIGINA.UNIV_NIVEL_ESTUDIOS AS
SELECT 		NIVEL_ESTUDIOS AS RANGO_NIVEL_ESTUDIOS,
			COUNT(CLIENTE) AS CLIENTES,
			SUM(BAD) AS BADS,
			(SUM(BAD)/COUNT(CLIENTE)) AS PORCENTAJE_BADS
FROM 		WORK.TEMPORAL
GROUP BY 1;
QUIT;


/* RANGOS NUEVOS CREADOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;
CREATE TABLE ORIGINA.UNIV_NIVEL_ESTUDIOS AS
SELECT 	RANGO_NIVEL_ESTUDIOS,  														
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		( SUM(BAD) / COUNT(CLIENTE) ) AS PORCENTAJE_BADS
FROM
( 		
SELECT 		CLIENTE,
			CASE
				WHEN NIVEL_ESTUDIOS IN ("Licenciatura","Postgrado") THEN "Lic o Mas"
				ELSE NIVEL_ESTUDIOS
			END AS RANGO_NIVEL_ESTUDIOS,
			BAD
FROM 		WORK.TEMPORAL
) AS Z	
GROUP BY 1;
QUIT;

/*INSUMO REGRESION*/

PROC SQL;
CREATE TABLE ORIGINA.R_NIVEL_ESTUDIOS AS
SELECT 	CLIENTE,
		PORCENTAJE_BADS AS R_NIVEL_ESTUDIOS
FROM
( 		
	SELECT 		CLIENTE,
			CASE
				WHEN NIVEL_ESTUDIOS IN ("Licenciatura","Postgrado") THEN "Lic o Mas"
				ELSE NIVEL_ESTUDIOS
			END AS RANGO_NIVEL_ESTUDIOS,
			BAD
	FROM 		WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_NIVEL_ESTUDIOS AS U
ON Z.RANGO_NIVEL_ESTUDIOS=U.RANGO_NIVEL_ESTUDIOS
;	
QUIT;

/*******************************************************************************************************************/
/**************************************** VARIABLE MUNICIPIO *******************************************************/
/*******************************************************************************************************************/

/* TABLA AUXILIAR PARA SUSTITUIR POSIBLES VALORES NA */
PROC SQL;
CREATE TABLE WORK.TEMPORAL AS
SELECT 		S.CLIENTE,
			MUNICIPIO AS MUNICIPIO_ORIGINAL,
			CASE 
				WHEN	MUNICIPIO IS NULL THEN "DESCONOCIDO"
				ELSE 	MUNICIPIO
			END AS MUNICIPIO,
			BAD
FROM		ORIGINA.SOLICITUD 		AS S
INNER JOIN	ORIGINA.FLAG_G_B 		AS F ON F.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.DEMOGRAFICOS 	AS D ON D.CLIENTE=S.CLIENTE
INNER JOIN  ORIGINA.BURO 			AS B ON B.CLIENTE=S.CLIENTE;
QUIT;

/* TABLA PARA OBTENER EL PORCENTAJE DE MALOS POR CADA CATEGORIA */
PROC SQL;
CREATE TABLE ORIGINA.UNIV_MUNICIPIO AS
SELECT 		MUNICIPIO AS RANGO_MUNICIPIO,
			COUNT(CLIENTE) AS CLIENTES,
			SUM(BAD) AS BADS,
			(SUM(BAD)/COUNT(CLIENTE)) AS PORCENTAJE_BADS
FROM 		WORK.TEMPORAL
GROUP BY 1;
QUIT;


/* RANGOS NUEVOS CREADOS A PARTIR DEL ANALISIS UNIVARIADO */
PROC SQL;
CREATE TABLE ORIGINA.UNIV_MUNICIPIO AS
SELECT 	RANGO_MUNICIPIO,  														
		COUNT(CLIENTE) AS CLIENTES,
		SUM(BAD) AS BADS,
		( SUM(BAD) / COUNT(CLIENTE) ) AS PORCENTAJE_BADS
FROM
( 		
SELECT 		CLIENTE,
			CASE
				WHEN MUNICIPIO IN ("Amecameca","Atlautla","Azcapotzalco","Chiconcuac","Coacalco de Berrioz","Cocotitlan","Huehuetoca","Hueypoxtla","Huixquilucan","Jaltenco","Jilotzingo","La Magdalena Contre","Miguel Hidalgo","Milpa Alta","Naucalpan de Juarez","Nicolas Romero","Papalotla","Teoloyucan","Teotihuacan","Texcoco","Tezoyuca","Tlalmanalco","Tonanitla","Atizapan de Zaragoza","Tultepec","Cuautitlan Izcalli","Tepotzotlan","Chimalhuacan") THEN "Grupo 1"
				WHEN MUNICIPIO IN ("Acolman","Coyoacan","CHICOLOAPAN","Iztacalco","Tlalpan","Nezahualcoyotl","Iztapalapa","Tlahuac","Tultitlan","Cuautitlan","La Paz","Tlalnepantla de Baz","Atizapan de Zaragoz","Valle de Chalco Solidarid","Venustiano Carranza","Ecatepec de Morelos","Valle de Chalco Sol","Xochimilco","La Magdalena Contreras","Gustavo A Madero")                                                                                       THEN "Grupo 2"
				WHEN MUNICIPIO IN ("Ixtapaluca","Coyotepec","Alvaro Obregon","Tecamac","Chalco","Cuauhtemoc","Coacalco de Berriozabal","Melchor Ocampo","Benito Juarez","Atenco","Nextlalpan")																																																																	THEN "Grupo 3"
				ELSE "NA"
			END AS RANGO_MUNICIPIO,
			BAD
FROM 		WORK.TEMPORAL
) AS Z	
GROUP BY 1;
QUIT;

/*INSUMO REGRESION*/

PROC SQL;
CREATE TABLE ORIGINA.R_MUNICIPIO AS
SELECT 	CLIENTE,
		PORCENTAJE_BADS AS R_MUNICIPIO
FROM
( 		
	SELECT 	CLIENTE,
			CASE
				WHEN MUNICIPIO IN ("Amecameca","Atlautla","Azcapotzalco","Chiconcuac","Coacalco de Berrioz","Cocotitlan","Huehuetoca","Hueypoxtla","Huixquilucan","Jaltenco","Jilotzingo","La Magdalena Contre","Miguel Hidalgo","Milpa Alta","Naucalpan de Juarez","Nicolas Romero","Papalotla","Teoloyucan","Teotihuacan","Texcoco","Tezoyuca","Tlalmanalco","Tonanitla","Atizapan de Zaragoza","Tultepec","Cuautitlan Izcalli","Tepotzotlan","Chimalhuacan") THEN "Grupo 1"
				WHEN MUNICIPIO IN ("Acolman","Coyoacan","CHICOLOAPAN","Iztacalco","Tlalpan","Nezahualcoyotl","Iztapalapa","Tlahuac","Tultitlan","Cuautitlan","La Paz","Tlalnepantla de Baz","Atizapan de Zaragoz","Valle de Chalco Solidarid","Venustiano Carranza","Ecatepec de Morelos","Valle de Chalco Sol","Xochimilco","La Magdalena Contreras","Gustavo A Madero")                                                                                       THEN "Grupo 2"
				WHEN MUNICIPIO IN ("Ixtapaluca","Coyotepec","Alvaro Obregon","Tecamac","Chalco","Cuauhtemoc","Coacalco de Berriozabal","Melchor Ocampo","Benito Juarez","Atenco","Nextlalpan")																																																																	THEN "Grupo 3"
				ELSE "NA"
			END AS RANGO_MUNICIPIO,
			BAD
	FROM 		WORK.TEMPORAL
) AS Z
LEFT JOIN ORIGINA.UNIV_MUNICIPIO AS U
ON Z.RANGO_MUNICIPIO=U.RANGO_MUNICIPIO
;	
QUIT;













